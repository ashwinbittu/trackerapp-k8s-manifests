trigger:
- main

# resources:
#   pipelines:
#   - pipeline: SAST_Pipeline_Trigger
#     source: SAST_Pipeline_DEV
#     project: trackeraks
#     trigger: true

pool:
  name: Default
  demands:
   - agent.name -equals ado-agent1-vm 

variables:

- group: dev_variables

stages:
- stage: BuildTestPushStage
  displayName: Build The App, Perform Tests & Push Image to Registry
  jobs:  
  - job: BuildTestPushJob
    displayName: Build The App, Perform Tests & Push Image to Registry
    steps:
    - task: Maven@3
      displayName: Maven Test
      inputs:
          goals: 'test'
    - task: PublishCodeCoverageResults@1
      displayName: JaCoCo Coverage Reports
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '$(Build.SourcesDirectory)/build/reports/jacoco/test/jacocoTestReport.xml'
        pathToSources: '$(Build.SourcesDirectory)/src/main/java'
        additionalCodeCoverageFiles: '$(Build.SourcesDirectory)/build/jacoco/*.exec'            
    - task: CmdLine@2
      displayName: PIT Mutation Test
      inputs:
        script: |
          echo 'Starting PIT Mutation Test'          
          #Commented to visit later
          #mvn org.pitest:pitest-maven:mutationCoverage
    - task: PublishPipelineArtifact@1
      displayName: Publish PIT Test Results
      #Commented to visit later
      #inputs:
      #  targetPath: '$(Build.SourcesDirectory)**/target/pit-reports/**/'
      #  artifact: 'mutations.xml'
      #  publishLocation: 'pipeline'  
    # - task: SonarQubePrepare@5
    #   inputs:
    #     SonarQube: 'sonarqube-trackerappp_svcconn'
    #     scannerMode: 'Other'
    #     extraProperties: |
    #       sonar.projectKey=terraform-azure-aks_trackerapp-code.git_AYoHpU6MwDH3RLskH9g6
    #       sonar.projectName=trackerapp-code.git
    - task: Bash@3
      displayName: 'Set JDK environment variables manually'
      inputs:
        targetType: 'inline'
        script: |
            export JAVA_HOME_11_X64='/usr/lib/jvm/java-11-openjdk-amd64'
            cd ~
            echo "##vso[task.setvariable variable=JAVA_HOME_11_X64]/usr/lib/jvm/java-11-openjdk-amd64"
            echo "##vso[task.setvariable variable=JAVA_HOME]/usr/lib/jvm/java-11-openjdk-amd64"          
    - task: JavaToolInstaller@0
      displayName: Setting Up JDK
      inputs:
        versionSpec: '11'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
        
    - task: Maven@4
      displayName: Build The App
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean install'
        options: '-DskipTests=true'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
        sqMavenPluginVersionChoice: 'latest'
    # - task: SonarQubePublish@5
    #   displayName: Publishing Sonarqube Results
    #   inputs:
    #     pollingTimeoutSec: '300'
    - task: CmdLine@2
      displayName: Vulnerability scan
      inputs:
        script: |
          echo 'Starting Vulnerability Scan'          
          #Commented to visit later as the no of CVEs are greater than 10 mentioned in the pom.xml
          #mvn dependency-check:check
    - task: Docker@2
      displayName: Create the Docker Image(s) and Push it to the container registry
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: '$(Build.BuildId)'
    # - task: trivy@1
    #   displayName: Trivy Scan Images
    #   inputs:
    #     docker: false
    #     version: 'latest'
    #     debug: true
    #     image: '$(containerRegistry).azurecr.io/$(imageRepository):$(Build.BuildId)'
    #     severities: 'CRITICAL,HIGH'
    #     options: '--scanners vuln'
        ####
    # - task: Docker@2
    #   displayName: Login to ACR
    #   inputs:
    #     containerRegistry: $(dockerRegistryServiceConnection)
    #     command: 'login'               
    # - task: trivy@1
    #   displayName: Trivy Scan Images
    #   inputs:
    #     version: 'latest'
    #     debug: true
    #     loginDockerConfig: true
    #     image: '$(containerRegistry).azurecr.io/$(imageRepository):$(Build.BuildId)'
    #     severities: 'CRITICAL,HIGH'
    #     options: '--scanners vuln'
    # - task: Docker@2
    #   displayName: Create the Docker Image(s) and Push it to the container registry
    #   inputs:
    #     command: buildAndPush
    #     repository: $(imageRepository)
    #     dockerfile: $(dockerfilePath)
    #     containerRegistry: $(dockerRegistryServiceConnection)
    #     tags: |
    #       $(Build.BuildId)          
    - task: Docker@2
      displayName: Create the Docker Image(s) and Push it to the container registry
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: '$(Build.BuildId)'
    - task: AzureCLI@2
      displayName: Update Variable Group with Build ID Tag
      inputs:
        azureSubscription: 'Azure subscription 1(37565286-71fe-4f4d-bde1-8f99918e786a)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |        
          az extension add --name azure-devops
          az config set extension.use_dynamic_install=yes_without_prompt
          echo $(System.AccessToken) | az devops login
          az pipelines variable-group variable update --group-id $(az pipelines variable-group list --group-name $(current_env)_variables --query '[0].id' -o json) --name tag --value $(Build.BuildId)
